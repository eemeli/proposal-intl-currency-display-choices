<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<pre class="metadata">
title: More Currency Display Choices
stage: 0
contributors: Eemeli Aro (Mozilla)
</pre>

<emu-clause id="numberformat-objects" number="15">
  <h1>NumberFormat Objects</h1>

  <emu-clause id="sec-intl-numberformat-constructor">
    <h1>The Intl.NumberFormat Constructor</h1>

    <emu-clause id="sec-setnumberformatunitoptions" type="abstract operation" number="3">
      <h1>
        SetNumberFormatUnitOptions (
          _intlObj_: an Intl.NumberFormat,
          _options_: an Object,
        ): either a normal completion containing ~unused~ or a throw completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It resolves the user-specified options relating to units onto _intlObj_.</dd>
      </dl>
      <emu-alg>
        1. Let _style_ be ? GetOption(_options_, *"style"*, ~string~, « *"decimal"*, *"percent"*, *"currency"*, *"unit"* », *"decimal"*).
        1. Set _intlObj_.[[Style]] to _style_.
        1. Let _currency_ be ? GetOption(_options_, *"currency"*, ~string~, ~empty~, *undefined*).
        1. If _currency_ is *undefined*, then
          1. If _style_ is *"currency"*, throw a *TypeError* exception.
        1. Else,
          1. If IsWellFormedCurrencyCode(_currency_) is *false*, throw a *RangeError* exception.
        1. Let _currencyDisplay_ be ? GetOption(_options_, *"currencyDisplay"*, ~string~, « *"code"*, *"symbol"*<ins>, *"formalSymbol"*</ins>, *"narrowSymbol"*, *"name"*<ins>, *"never"*</ins> », *"symbol"*).
        1. Let _currencySign_ be ? GetOption(_options_, *"currencySign"*, ~string~, « *"standard"*, *"accounting"* », *"standard"*).
        1. Let _unit_ be ? GetOption(_options_, *"unit"*, ~string~, ~empty~, *undefined*).
        1. If _unit_ is *undefined*, then
          1. If _style_ is *"unit"*, throw a *TypeError* exception.
        1. Else,
          1. If IsWellFormedUnitIdentifier(_unit_) is *false*, throw a *RangeError* exception.
        1. Let _unitDisplay_ be ? GetOption(_options_, *"unitDisplay"*, ~string~, « *"short"*, *"narrow"*, *"long"* », *"short"*).
        1. If _style_ is *"currency"*, then
          1. Set _intlObj_.[[Currency]] to the ASCII-uppercase of _currency_.
          1. Set _intlObj_.[[CurrencyDisplay]] to _currencyDisplay_.
          1. Set _intlObj_.[[CurrencySign]] to _currencySign_.
        1. If _style_ is *"unit"*, then
          1. Set _intlObj_.[[Unit]] to _unit_.
          1. Set _intlObj_.[[UnitDisplay]] to _unitDisplay_.
        1. Return ~unused~.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-numberformat-constructor">
    <h1>Properties of the Intl.NumberFormat Constructor</h1>

    <emu-clause id="sec-intl.numberformat-internal-slots" number="3">
      <h1>Internal slots</h1>

      <p>
        ...
      </p>

      <p>
        The value of the [[LocaleData]] internal slot is implementation-defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref> and the following additional constraints:
      </p>

      <ul>
        <li>...</li>
        <li>
          The two fields *"currency"* and *"unit"* noted above must be Records with at least one field, *"fallback"*.
          The *"currency"* may have additional fields with keys corresponding to currency codes according to <emu-xref href="#sec-currency-codes"></emu-xref>.
          Each field of *"currency"* must be a Record with fields corresponding to the possible currencyDisplay values: *"code"*, *"symbol"*<ins>, *"formalSymbol"*</ins>, *"narrowSymbol"*, <del>and </del>*"name"*<ins>, and *"never"*</ins>.
          Each of those fields must contain a Record with fields corresponding to the possible currencySign values: *"standard"* or *"accounting"*. The *"unit"* field (of [[LocaleData]].[[&lt;_locale_&gt;]]) may have additional fields beyond the required field *"fallback"* with keys corresponding to core measurement unit identifiers corresponding to <emu-xref href="#sec-measurement-unit-identifiers"></emu-xref>.
          Each field of *"unit"* must be a Record with fields corresponding to the possible unitDisplay values: *"narrow"*, *"short"*, and *"long"*.
        </li>
        <li>...</li>
      </ul>

      <emu-note>
        It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="https://cldr.unicode.org/">https://cldr.unicode.org/</a>).
      </emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-numberformat-instances" number="4">
    <h1>Properties of Intl.NumberFormat Instances</h1>

    <p>
      Intl.NumberFormat instances are ordinary objects that inherit properties from %Intl.NumberFormat.prototype%.
    </p>

    <p>
      Intl.NumberFormat instances have an [[InitializedNumberFormat]] internal slot.
    </p>

    <p>
      Intl.NumberFormat instances also have several internal slots that are computed by the constructor:
    </p>

    <ul>
      <li>...</li>
      <li>[[Currency]] is a String value with the currency code identifying the currency to be used if formatting with the *"currency"* unit type. It is only used when [[Style]] has the value *"currency"*.</li>
      <li><del>[[CurrencyDisplay]] is one of the String values *"code"*, *"symbol"*, *"narrowSymbol"*, or *"name"*, specifying whether to display the currency as an ISO 4217 alphabetic currency code, a localized currency symbol, or a localized currency name if formatting with the *"currency"* style. It is only used when [[Style]] has the value *"currency"*.</del></li>
      <li><ins>[[CurrencyDisplay]] is one of the String values *"code"*, *"symbol"*, *"formalSymbol"*, *"narrowSymbol"*, *"name"*, or *"never"*, specifying whether to display the currency as an ISO 4217 alphabetic currency code, a localized currency symbol, a localized currency name, or not display the currency if formatting with the *"currency"* style. It is only used when [[Style]] has the value *"currency"*.</ins></li>
      <li>[[CurrencySign]] is one of the String values *"standard"* or *"accounting"*, specifying whether to render negative numbers in accounting format, often signified by parenthesis. It is only used when [[Style]] has the value *"currency"* and when [[SignDisplay]] is not *"never"*.</li>
      <li>...</li>
    </ul>

    <p>
      Finally, Intl.NumberFormat instances have a [[BoundFormat]] internal slot that caches the function returned by the format accessor (<emu-xref href="#sec-intl.numberformat.prototype.format"></emu-xref>).
    </p>
  </emu-clause>
</emu-clause>
